# Copyright The OpenTelemetry Authors
# SPDX-License-Identifier: Apache-2.0
name: CI/CD Pipeline
on:
  push:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub or another container registry
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version
      
      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        run: |
          docker-compose -f docker-compose.yml build

      # Step 4: Run automated tests
      - name: Run CI Test
        uses: actions/checkout@v4
      - name: Run tracetesting
        run: |
          make build && docker system prune -f && make run-tracetesting
  deploy:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 # Change to your EKS region

      # Step 3: Decode and configure kubeconfig
      - name: Set up kubectl
        run: |
          aws eks update-kubeconfig --region us-east-1 --name OT-Cluster
          kubectl get nodes

      # Step 4: Apply Kubernetes manifests
      - name: Deploy to Kubernetes
        run: |
          kubectl apply --namespace otel-demo -f ./kubernetes/output --recursive
          
      # Step 5: Wait for roll out
      - name: Wait for all deployments to roll out
        run: |
          namespace="otel-demo" # Update with your namespace
          for deployment in $(kubectl get deployments -n $namespace -o jsonpath='{.items[*].metadata.name}'); do
              echo "Checking rollout status for deployment: $deployment"
              kubectl rollout status deployment/$deployment -n $namespace
          done
      
      - name: Validate application health
        run: |
          namespace="otel-demo"
          service_name="opentelemetry-demo-frontendproxy"
          retries=10
          success=false

          for ((i=0; i<$retries; i++)); do
            echo "Checking health of $service_name in namespace $namespace (Attempt $((i+1)))"
            
            # Get the external IP or LoadBalancer endpoint
            endpoint=$(kubectl get svc $service_name -n $namespace -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            
            if [[ -z "$endpoint" ]]; then
              echo "Waiting for LoadBalancer IP/hostname..."
              sleep 10
              continue
            fi

            # Perform health check
            if curl -f http://$endpoint/health; then
              echo "Health check passed!"
              success=true
              break
            else
              echo "Health check failed. Retrying..."
              sleep 10
            fi
          done

          if [ "$success" = false ]; then
            echo "Health check failed after $retries attempts."
            exit 1
          fi

      - name: Rollback on failure
        if: failure()
        run: |
          echo "Deployment failed. Rolling back to the last stable version."
          namespace="otel-demo"
          for deployment in $(kubectl get deployments -n $namespace -o jsonpath='{.items[*].metadata.name}'); do
              kubectl rollout undo deployment/$deployment -n $namespace
          done